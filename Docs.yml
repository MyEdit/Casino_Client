#Класс отвечающий за серверный код
network/NetworkServer:
    - sendToServer() - Шаблонный метод отправки пакета серверу с указанием ему размера пакета
    - getMessageFromServer() - Шаблонный метод получения пакета от сервера
    - getMessageFromServer() - Шаблонный метод получения пакета (QByteArray) от сервера

#Классы отвечающие за обработку пакетов
network/PacketActions:

#Класс отвечающий за обработку входящих пакетов от сервера
network/PacketHandler:
    - clientHandler() - Обобщенный обработчик всех пакетов
    - packetHandler() - Обработчик определенных пакетов
    - tryReconnectToServer() - Метод вызываемый при дисконнекте от сервера

#Абстрактный класс пользователей
Users/User:

#Класс игрока
Users/Player:

#Класс сотрудника
Users/StuffUser:

#Класс стола
Games/Tabel/Table:
    - addTable() - Добавляет новый стол в глобальную коллекцию
    - canJoin() - Метод определяющий может ли игрок присоедениться к столу
    - tryJoin() - Метод отправляющий пакет в сервер для присоединения клиента к столу
    - updatePlayers() - Метод обновляющий информацию о игроках в GUI
    
#Абстрактный класс игры
Games/Game:
    - onGamePacketReceived() - Обработчик игровых пакетов
    - takeCard() - Метод запрашивающий у сервера карту
    - pass() - Метод оповещающий сервер о том что, игрок завершил свой ход
    - onUpdateGameProcessing() - Метод обновляющий таймер (Время до начала игры) или отображающий о том, чей сейчас ход
    - leave() - Метод обрабатывающий выход игрока из игрового стола
    - createGUI() - Метод создающий GUI игры
    - onTakeCard() - Метод обрабатывающий взятие карты
    - onTakeCardAnotherPlayer() - Метод обрабатывающий взятие карты другим игроком
    - onStartMove() - Метод обрабатывающий начало хода игрока
    - onGameFinished() - Метод обрабатывающий финиш игры
    - renderTakeCard() - Метод вызывающий рендер взятия карты
    - renderTakeCardAnotherPlayer() - Метод вызывающий рендер взятия карты другим игроком
    - unlockInterface() - Метод блокирующий/разблокирующий игровой интерфейс и вызывающий onUpdateGameProcessing()
    - turn() - Метод отправляющий пакеты на сервер при взятии или пасе
    
#Класс игры BlackJack
Games/BlackJack:
    - renderTakeCard() - Метод вызывающий рендер взятия карты
    - isBust() - Метод проверяющий перебор очков у игрока
    - getPlayerScore() - Метод возвращающий кол-во очков у игрока
    - createGUI() - Метод создающий GUI игры
    
#Класс отображающий информацию об игроке во время игры (Кол-во карт, имя, кол-во очков)
Games/InterfaceElements/PlayerIcon:

#Класс определяющий позиции иконок игроков за столом и обновляющий информацию о них
Games/InterfaceElements/PlayersIconsWidget:

#Основная GUI игры BlackJack
Games/BlackJack/GUI/BlaclJackWidget:

#Отображает игровой стол, отвечает за рендер взятия карт
Games/BlackJack/GUI/InterfaceElements/BlackJackBackground:
    
#Класс GUI окна авторизации
GUI/Window_Auth:

#Классы GUI меню игрока и администратора
GUI/Window_Admin|Window_Player:

#Класс GUI ячейки содержащий информацию о столе
GUI/Form:

//TODO: Уточнить у Андрей Алексеевича про uploadingUserPhoto
#Базовый класс меню пользователя
BaseClass/BaseClassMainMenu:
    - uploadingUserPhoto() - Метод преобразовывающий QByteArray в QPixmap
    - onNavigationsButton_clicked() - Метод обрабатывающий переключение между вкладками меню
    - changeUser() - Метод обрабатывающий смену пользователя
    - settingUserInformation() - Метод устанавливающий информацию о пользователе в меню

#Базовый класс для игрового QWidget
BaseClass/BaseClassGameWidget:
    - updateProcessing() - Метод обновляющий таймер (Время до начала игры) или отображающий о том, чей сейчас ход
    - renderTakeCard() - Метод вызывающий рендер взятия карты
    - renderFakeTakeCard() - Метод вызывающий рендер взятия карты другим игроком
    - pass() - Метод обрабатывающий событие завершения хода игроком
    - startChekedTable() - Метод запускающий таймер
    - checkTableExistence() - Метод запускающий проверку существования объекта стола
    - distributor() - Метод обрабатывающий ответ от сервера существует ли объект стола
    - showEvent() - Метод запускающий startChekedTable()
    - closeEvent() - Метод отправляющий серверу информацию о том, что игрок вышел из игры
    
#Базовый класс для QWidget содержащий в себе поиск, сортировку, фильтрацию или пагинацию
BaseClass/BaseClassSearchWindow:
    - blockAndOperate() - Метод блокирующий сигналы от объекта QObject во время выполнения операции над ним
    - search() - Метод запускающий таймер для поиска
    - goToPage() - Метод запускающий таймер для перехода на указанную страницу
    - onHeaderClicked() - Метод обработки нажатия на заголовок столбца в QTableView
    - prepReloadModels() - Метод перезагружающий модели
    - runSearch() - Метод запускающий поиск
    - runGoToPage() - Метод запускающий переход на указаннную страницу

#Базовый класс GUI для установки фильтров
BaseClass/BaseClasFilter:
    - applyFilter() - Метод обрабатывающий выбранные фильтры

#Классы редактирования информации о записях в таблицах
GUI/WorkingWithRecords/Admin/W_Ban | W_StuffUser | W_Table | W_User:
    - on_bottonSave_clicked() - Метод сохранения информации о записи
    - setDefaultValues() - Метод устанавливающий дефолтные значения о записи
    
#Класс GUI вкладки отображающая актуальную инфомацию о всех игровых столах
GUI/TabWidgets/Player/GameTable:
    - requestTables() - Метод раз в 1сек запрашивающий актуальную информацию о столах
    - updateTables() - Метод обновляющий информацию о столах
    - deleteOldTable() - Метод удаляющий недействительные столы и обновляющий информацию о актуальных столах
    - renderNewTable() - Метод рендера новых столов

#Классы GUI вкладок у игрока (Кредиты, платежи)
GUI/TabWidgets/Player/PlayerCredits | PlayerPayments:

#Классы GUI вкладок у администратора   
GUI/TabWidgets/Admin/*:

#Класс GUI уведомлений
GUI/Notification/Notification:
    - showNotification() - Метод отображающий оповещение
    - setAlertProperties() - Метод устанавливающий параметры внешнего вида уведомления

#Классы GUI отвечающие за рендер окон фильтров
GUI/Filters/Admin | Player /*:

#Класс отвечающий за установку внешнего вида QTableView
Utils/WorkingIsTableView:

#Класс сериализатора моделей для отправки клиентам
Utils/Serializer:
    - deserializationDataModel() - Десериализует QByteArray в модель (QStandardItemModel)
    
#Утилитарный класс отвечающий за логгирование информации, предупреждений, ошибок
Utils/Message:

#Класс поиска информации в модели или отправки запроса на сервер
Utils/SearchModule:
    - searchInModels() - Метод начинающий поиск в загруженных моделях
    - searchInDB() - Метод отправляющий пакет поиска на сервер
   
#Класс реализующий пагинацию
Utils/Pagination:
    - updateTablePage() - Метод лимитирующий максимальное кол-во строк в одной таблице
    - handleNextPage() - Метод проверяющий необходимость переключения на следующую модель
    - handlePrevPage() - Метод проверяющий необходимость переключения на предыдущую модель
    - goToNextModel() - Метод переключения на следующую модель
    - goToPrevModel() - Метод переключения на предыдущую модель
    - acceptModel() - Обработчик входящих моделей от сервера
    - goToPage() - Метод переключающий страницу на указанную
    - search() - Метод запускающий поиск
    - loadingModel() - Метод запрашивающий модель у сервера